generator client {
  provider = "prisma-client-js"
}

// DB INFORMATION
datasource db {
  provider = "sqlite"
  url      = "file:./disco.db"
}

// MODELS
model Configuration {
  id                        String   @id @default(cuid())
  media_server_name         String   @default("The Server")
  prefix_keyword            String   @default("!df")
  discord_token             String?
  radarr_url                String?
  radarr_token              String?
  sonarr_url                String?
  sonarr_token              String?
  session_timeout           Int      @default(60)
  max_check_time            Int      @default(600)
  max_results               Int      @default(0)
  max_seasons_for_non_admin Int      @default(0)
  is_debug                  Boolean  @default(false)
  is_radarr_enabled         Boolean  @default(true)
  is_sonarr_enabled         Boolean  @default(true)
  is_trailers_enabled       Boolean  @default(true)
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt

  @@map("configuration")
}

model State {
  id                String         @id @default(cuid())
  discord_state     Boolean        @default(false)
  sidebar_exp_state Boolean        @default(true)
  active_server_id  String?        @unique
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  activeServer      DiscordServer? @relation(fields: [active_server_id], references: [server_id], onDelete: SetNull)

  @@map("state")
}

model EventLog {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  level     String
  message   String
  metadata  String?

  @@index([timestamp])
  @@map("event_logs")
}

model DiscordBot {
  id                String   @id @default(cuid())
  bot_id            String   @default("0")
  bot_username      String   @default("Unavailable")
  bot_discriminator String   @default("0000")
  bot_avatar_url    String?
  bot_invite_link   String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("discord_bots")
}

model DiscordServer {
  server_id            String                 @id @default(uuid())
  unread_message_count Int?                   @default(0)
  server_name          String?                @default("TBD")
  server_avatar_url    String?
  sort_position        Int?                   @default(-1)
  active_channel_id    String?
  available            Boolean?               @default(true)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  users                User[]                 @relation("UserDiscordServers")
  requests             MediaRequest[]         @relation("DiscordServerRequests")
  channels             DiscordServerChannel[]
  messages             DiscordMessage[]
  state                State?

  @@index([sort_position])
  @@map("discord_servers")
}

model DiscordServerChannel {
  channel_id           String           @id @default(uuid())
  channel_name         String?          @default("TBD")
  position             Int?             @default(-1)
  discord_server       String
  channel_type         Int              @default(0)
  isTextChannel        Boolean          @default(false)
  isVoiceChannel       Boolean          @default(false)
  isCategory           Boolean          @default(false)
  parent_id            String           @default("")
  unread_message_count Int              @default(0)
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  server               DiscordServer    @relation(fields: [discord_server], references: [server_id], onDelete: Cascade)
  messages             DiscordMessage[]

  @@index([discord_server])
  @@index([parent_id])
  @@index([position])
  @@map("discord_channels")
}

model DiscordMessage {
  message_id String               @id @default(uuid())
  server_id  String
  channel_id String
  user_id    String
  content    String
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  server     DiscordServer        @relation(fields: [server_id], references: [server_id], onDelete: Cascade)
  channel    DiscordServerChannel @relation(fields: [channel_id], references: [channel_id], onDelete: Cascade)
  user       User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([server_id])
  @@index([channel_id])
  @@index([user_id])
  @@index([created_at])
  @@map("discord_messages")
}

model Media {
  id           String         @id @default(cuid())
  title        String?
  overview     String?
  poster_url   String?
  year         Int?
  path         String?
  monitored    Boolean?
  runtime      Int?
  added        String?
  season_count Int?
  network      String?
  air_time     String?
  tvdb_id      String?
  imdb_id      String?        @unique
  first_aired  String?
  series_type  String?
  in_theaters  String?
  website_url  String?
  trailer_url  String?
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  requests     MediaRequest[]

  @@index([imdb_id])
  @@map("media")
}

model MediaRequest {
  id                String        @id @default(cuid())
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  made_in           DiscordServer @relation("DiscordServerRequests", fields: [madeInId], references: [server_id])
  madeInId          String
  media             Media         @relation(fields: [mediaId], references: [id])
  mediaId           String
  orig_message      String?
  orig_parsed_title String?
  orig_parsed_type  String?
  status            Boolean?
  users             User[]        @relation("UserMediaRequests")

  @@index([madeInId])
  @@index([mediaId])
  @@map("media_requests")
}

model User {
  id                        String           @id @default(uuid())
  username                  String           @default("DiscordUser")
  display_name              String           @default("ADiscordUser")
  accent_color              String           @default("ffffff")
  avatar_url                String           @default("https://cdn.discordapp.com/embed/avatars/3.png")
  is_superuser              Boolean          @default(false)
  is_staff                  Boolean          @default(false)
  is_active                 Boolean          @default(true)
  is_bot                    Boolean          @default(false)
  is_client                 Boolean          @default(false)
  session_timeout           Int              @default(60)
  max_check_time            Int              @default(600)
  max_results               Int              @default(0)
  max_seasons_for_non_admin Int              @default(0)
  max_requests_in_day       Int              @default(0)
  created_at                DateTime         @default(now())
  updated_at                DateTime         @updatedAt
  discord_servers           DiscordServer[]  @relation("UserDiscordServers")
  requests                  MediaRequest[]   @relation("UserMediaRequests")
  messages                  DiscordMessage[]

  @@index([username])
  @@map("users")
}
