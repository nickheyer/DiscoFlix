// PRISMA GENERATOR

generator client {
  provider = "prisma-client-js"
}

// DATABASE INFORMATION

datasource db {
  provider = "sqlite"
  url      = "file:./disco.db"
}

// MODEL DEFINITIONS

model Configuration {
  id                        Int     @id @default(autoincrement())
  media_server_name         String? @default("The Server")
  prefix_keyword            String? @default("!df")
  discord_token             String?
  radarr_url                String?
  radarr_token              String?
  sonarr_url                String?
  sonarr_token              String?
  session_timeout           Int?    @default(60)
  max_check_time            Int?    @default(600)
  max_results               Int?    @default(0)
  max_seasons_for_non_admin Int?    @default(0)
  is_debug                  Boolean @default(false)
  is_radarr_enabled         Boolean @default(true)
  is_sonarr_enabled         Boolean @default(true)
  is_trailers_enabled       Boolean @default(true)
}

model State {
  id                Int            @id @default(autoincrement())
  discord_state     Boolean        @default(false)
  sidebar_exp_state Boolean        @default(true)
  active_server_id  String?        @unique
  activeServer      DiscordServer? @relation(fields: [active_server_id], references: [server_id])
}

model ErrLog {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  entry   String   @default("Error Occured")
}

model EventLog {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  entry   String   @default("Event Occured")
}

model DiscordBot {
  id                Int     @id @default(autoincrement())
  bot_username      String? @default("Unavailable")
  bot_discriminator String? @default("0000")
  bot_avatar_url    String?
  bot_invite_link   String?
}

model DiscordServer {
  server_id         String         @id
  unread_ui_state   Boolean        @default(false)
  server_name       String?
  server_avatar_url String?
  sort_position     Int
  users             User[]         @relation("UserDiscordServers")
  requests          MediaRequest[] @relation("DiscordServerRequests")
  channels          DiscordServerChannel[]
  messages          DiscordMessage[]
  state             State?         
}

model DiscordServerChannel {
  id          Int             @id @default(autoincrement())
  discord_server   String
  channel_id  String
  name        String
  type        String          @default("text") // Assuming 'text' and 'voice' as possible values
  server      DiscordServer   @relation(fields: [discord_server], references: [server_id])
  messages    DiscordMessage[]

  @@index([discord_server])
}

model DiscordMessage {
  id          Int                  @id @default(autoincrement())
  server_id   String
  channel_id  Int
  user_id     Int
  content     String
  created_at  DateTime             @default(now())
  server      DiscordServer        @relation(fields: [server_id], references: [server_id])
  channel     DiscordServerChannel @relation(fields: [channel_id], references: [id])
  user        User                 @relation(fields: [user_id], references: [id])

  @@index([server_id])
  @@index([channel_id])
  @@index([user_id])
}


model Media {
  id           Int            @id @default(autoincrement())
  title        String?
  overview     String?
  poster_url   String?
  year         Int?
  path         String?
  monitored    Boolean?
  runtime      Int?
  added        String?
  season_count Int?
  network      String?
  air_time     String?
  tvdb_id      String?
  imdb_id      String?
  first_aired  String?
  series_type  String?
  in_theaters  String?
  website_url  String?
  trailer_url  String?
  requests     MediaRequest[] @relation("MediaRequests")
}

model MediaRequest {
  id                Int           @id @default(autoincrement())
  created           DateTime      @default(now())
  made_in           DiscordServer @relation("DiscordServerRequests", fields: [madeInId], references: [server_id])
  madeInId          String
  media             Media         @relation("MediaRequests", fields: [mediaId], references: [id])
  mediaId           Int
  orig_message      String?
  orig_parsed_title String?
  orig_parsed_type  String?
  status            Boolean?
  users             User[]        @relation("UserMediaRequests")
}

model User {
  id                        Int             @id @default(autoincrement())
  added                     DateTime        @default(now())
  is_admin                  Boolean         @default(false)
  is_server_restricted      Boolean         @default(false)
  username                  String          @unique
  discord_servers           DiscordServer[] @relation("UserDiscordServers")
  requests                  MediaRequest[]  @relation("UserMediaRequests")
  is_additional_settings    Boolean         @default(false)
  is_superuser              Boolean         @default(false)
  is_staff                  Boolean         @default(false)
  is_active                 Boolean         @default(true)
  session_timeout           Int             @default(60)
  max_check_time            Int             @default(600)
  max_results               Int             @default(0)
  max_seasons_for_non_admin Int             @default(0)
  max_requests_in_day       Int             @default(0)
  messages                  DiscordMessage[]
}
